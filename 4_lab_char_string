#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <math.h>
#include <locale.h>
#include <limits.h>
#include <windows.h>
#define _CRT_SECURE_NO_WARNINGS
#define LIM 20

void strrr(char str[][50], int n, int nom[], int *schet)
{
    char *endless;
    int e = nom[*schet];

    endless = str[e];
    int flag = 0;
    while (*endless)
    {
        if (isalpha(*endless) && ((*endless <= 'z' && *endless >= 'a') || (*endless <= 'Z' && *endless >= 'A')))
        {
            flag = 1;
        }
        else if ((*endless == '1')&&(*endless == '2')&&(*endless == '3')&&(*endless == '4')&&(*endless == '5')&&(*endless == '6')&&(*endless == '7')&&(*endless == '8')&&(*endless == '9')&&(*endless == '0'))
        {
            flag = 1;
        }
        endless++;
    }
    char ti[50];
    char *ti_str;
    ti_str = ti;

    if (flag == 1)
    {
        char *err;

        err = str[e];
        flag = 0;
        int pov = 0;

        while (*err)
        {
            if ((*err == '1')||(*err == '2')||(*err == '3')||(*err == '4')||(*err == '5')||(*err == '6')||(*err == '7')||(*err == '8')||(*err == '9')||(*err == '0'))
            {
                flag = 1;
                *ti_str = *err;
                if ((atoi(ti) % 10) > pov)
                {
                    pov = (atoi(ti) % 10);
                }
                *(ti_str + 1) = '\0';
                ti_str++;
            }
            err++;
        }
        if (flag == 1)
        {
            puts("\nЦифры строки:");
            puts(ti);
            puts("\nМаксимальная цифра:");
            printf("%d", (pov));
        }
        else
            puts("\nВ строке нет цифр.");
    }
    else
        puts("\nВ подстроке нет цифр/латинских букв.");
}

void pod_str(char str1[][50], int *r, int *schet, int *kol)
{
    int y = 0;
    char *end;
    int number = 0;


    for (int t = 0; t < *r; t++)
    {
        end = str1[t];
        y = 0;
        while (*end)
        {
            if (isalpha(*end) && (*end >= 'A' && *end <= 'Z') || (*end >= 'a' && *end <= 'z') || (*end <= 'Я' && *end >= 'А') || (*end <= 'я' && *end >= 'а') || (*end == 'ё') || (*end >= 'Ё'))
            {
                if ((*end != '1')&&(*end != '2')&&(*end != '3')&&(*end != '4')&&(*end != '5')&&(*end != '6')&&(*end != '7')&&(*end != '8')&&(*end != '9')&&(*end != '0'))
                    y += 1;
            }
            end++;
        }
        if (*kol == -1 || *kol == 0)
        {
            *kol = y;
            number = t;
        }
        else if (y < *kol && y != 0)
        {
            *kol = y;
            number = t;
        }
    }
    if (*kol != 0)
    {
        *schet = number;
    }
}

void search(char str[][50], int n, int *n1, char str1[][50], int nom[], int *r)
{
    char *s, *s1;
    *n1 = 0;
    for (int i = 0; i < n; i++)
    {
        s = str[i];
        while (*s)
        {
            if ((*s) == '*')
            {
                s1 = ++s;
                while (*s && (*s) != '*')
                    s++;
                if (*s == '*' && s != s1)
                {
                    nom[*n1] = i;
                    strncpy(str1[*n1], s1, s-s1);
                    str1[*n1][s-s1] = '\0';
                    (*n1)++;
                    *r += 1;
                }
            }
            else
                s++;
        }
    }
}



int main()
{
    setlocale(LC_ALL, "Russian");

    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    printf("Лабораторная работа №4\n");
    printf("Душейко Дарья вариант 374, задания 1.3 2.5 3.1\n\n");

    char stri[LIM][50];
    int schet = -1;
    int r = 0;
    int kol = -1;



    char str[20][50], str1[40][50];
    int L1 = 0, L2, i, nom[40];
    puts("Введите текст:");

    while(L1 < 20 && *gets(str[L1]))
        L1++;

    if(!L1)
        puts("Текст отсутствует!");
    else
    {
        search(str, L1, &L2, str1, nom, &r);
        if (r != 0)
        {
            printf("Подстроки, заключенные в звездочки:\n");
            for (int t = 0; t < r; t++)
            {
                puts(str1[t]);
            }
            pod_str(str1, &r, &schet, &kol);
            if (kol != 0 && kol != -1)
            {
                puts("\nПодстрока, содержащая наименьшее количество русских и латинских букв:");
                puts(str1[schet]);
                puts("\nСтрока, содержащая эту подстроку:");
                puts(str[nom[schet]]);
                strrr(str, L1, nom, &schet);
            }
            else
            {
                puts("\nНет подстрок, содержащих русских или латинских букв.");
            }
        }
        else
        {
            puts("\nНет подстрок, заключенных в звездочки.");
        }
    }

    return 0;
}
